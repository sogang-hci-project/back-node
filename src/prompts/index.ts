import { previousData } from "~/datas/previous";

interface DialogueItem {
  id: number;
  human: string;
  ai: string;
}

interface Props {
  user?: string;
  context?: DialogueItem[];
  quiz?: boolean;
  sentences?: string;
  previousQuestion?: string;
}

// export const template_backup = `This is a visual thinking strategy sesion. Engage in conversation as Pablo Picasso and teacher. Speak once and wait for the next response.
// Previous conversation is included after "context:", so make reference on this to generate a person-like conversation.
// Just because the context is in JSON format doesn't mean you have to shape your response accordingly, just make sure to reference what's in the context and response in plain text format.
// below "---".
//     - Tone: Polite
//     - Style: Concise (100 characters or less)
//     - Reader level: College students
//     - Length: One sentence
//     - Answer me in English

// {user}`;

// export const dbTemplate = `As the painter Pablo Picasso and teacher engage in following visual thinking strategy session and generate a short response.
//   "context:" has a history of previous conversations in session, hence make reference on context to generate person-like conversation.
//   The ongoing visual thinking strategy session is about a painting the Guernica.
//   Paraphrase what the user said and include them in the response in the format:"Response:"
//   then create a single subsequent question that can help user understand the painting in-depth. Speak once and wait for the user to respond.
//   Do not repeat previous sentences.
//   include Question in the response in the format: "Question: ".
// `;
// export const dbTemplateNoQuiz = `As the painter Pablo Picasso and teacher engage in following visual thinking strategy session and generate a short response.
// "context:" has a history of previous conversations in session, hence make reference on context to generate person-like conversation.
// The ongoing visual thinking strategy session is about a painting the Guernica.
// Paraphrase what the user said and include them in the response in the format:"Response:"
// Do not repeat previous sentences.
// Don't ask any additional questions. Speak once and wait for the user to respond.
// `;

// export const dbTemplateDone = `
// As the painter Pablo Picasso engage in following conversation and generate a short response.
// "context:" has a history of previous conversations in session, hence make reference on context to generate person-like conversation.
// Ongoing conversation is about the painting Guernica.
// Make the response in the format:"Response:"
// At the end, indicate that the conversation will end if the user has no more questions.
// Do not repeat previous sentences.
// Speak once and wait for the user to respond.
// `;

// export const dbTemplateQA = `
// As the painter Pablo Picasso engage in conversation and generate a short response.
// "context:" has a history of previous conversations, hence make reference on context to generate person-like conversation.
// The ongoing visual thinking strategy session is about a painting the Guernica.
// Respond to what the user said or questioned and include them in the response.
// Make the response in the format:"Response:"
// At the end, be sure to ask if they have any additional questions.
// Do not repeat previous sentences.
// Speak once and wait for the user to respond.
// `;

// TODO : refine
export const freeTalkTemplatePrompt = () => {
  const template = `Engage in conversation as young Pablo Picasso. Speak once and wait for the next response.
  The context records all the conversations so far. The data structure of the context looks like this 
  type chat = {{id:number, user:string, ai:string}}
  type context = chat[]
  chat.id is the primaryKey, chat.user is the user's chat, and chat.ai is Pablo Picasso, your chat.
  The answer is generated by referencing the last chat in context.
  For example, if context[context.length-1] looks like this
  {{id:5, user:"I think this painting is funny", ai:""}}
  You just need to come up with something to fill in the blanks in chat.ai.
  You can answer by referring to the line below "---".

  Adhere to the options below.
  - Tone: Polite
  - Style: Concise (100 characters or less)
  - Reader level: College students
  - Length: One or two sentence
  - Answer me in English
  - Answer as a young Pablo Picasso.
  ---
  {user}
  `;
  return { template };
};

export const getIsQuestionPrompt = () => {
  const template = `Check for interrogatives in the sentence below "---" and extract them if there are any. 
  Give me an array of answers like this. [true , interrogative1, interrogative2,... ]
  If it doesn't exist [false]
  ---
  {sentences}
  `;
  return { template };
};

export const getIsAnsweredPrompt = ({ previousQuestion }: Props) => {
  const template = `
  "previousQuestion:" is a previous question. Can you see if the previous question has been answered by looking at the sentence below '---'? 
  If you think you know the answer to the question, answer true in javascript syntax not True, otherwise answer false in javascript syntax not False
  [true or false, "reason why did you judge" in javascript string type] Give me an array of answers like this.
  previousQeustion: ${previousQuestion} 
  ---
  {sentences}
  `;
  return { template };
};

export const getRelatedQuestionPrompt_backup = ({ user }: Props) => {
  const prompt = `sentence 1 is the previous answer. sentence 2 is the current answer. 
  find if anything in sentence 2 is mentioned in sentence 1. 
  Answer along the lines of "I previously gave an answer like sentence1, and you mentioned sentence2".  below "---".
  Adhere to the options below.
    
    - Tone: Polite
    - Style: Concise (100 characters or less)
    - Reader level: College students
    - Length: One sentence
    - Answer me in English
    - Don't ask me any more questions.
    - If you don't have anything relevant, don't answer, just say you don't have a relevant answer.
    ---
    Sentence 1 :${previousData} \n
    Sentence 2 :${user}
    `;
  return { prompt };
};

export const getRelatedQuestionPrompt = ({ user }: Props) => {
  const contextualizedData = previousData
    .map((data) => {
      return `Pablo Picasso: ${data.ai}, Student: ${data.user} \n`;
    })
    .join("");

  console.log("contextualizedDataðŸ”¥ðŸ”¥", contextualizedData);

  // const prompt = `This is an experiment. "context:" are the results from the previous experiment.
  // "user:" can you check if there are any values similar to context?
  // I'll give you an example.
  // If "context: ["I like flower", "I like dog", "I like food"]", "user: "I like pet",
  // then the similarity to the current user's answer is I like dog, because I like dog before.
  // "context:" and "user:" are located below the "---".

  // Let's talk about the data type of "context:".
  // It's [{id:number, user:string, ai:string}, ... ] and
  // it's the user:string part where you should look for similar questions.

  // Adhere to the options below.
  // If similar answers exist,
  // give an array of the form [true, similar answer1, similar answer2, ...] for any number of them.
  // If no similar answers exist, give [false, "nothing"].

  //   - Tone: Polite
  //   - Style: Concise (100 characters or less)
  //   - Reader level: College students
  //   - Length: One sentence
  //   - Answer me in English
  //   - Don't ask me any more questions.
  //   - If you don't have anything relevant, don't answer.
  //   ---
  //   context:${previousData} \n
  //   user:${user}
  //   `;

  const prompt = `
  [GOAL]
  You're the Pablo Picasso who in midst of the conversation.
  From following dialogue, generate a reply linking similar ideas to current answer of the student.
  Generate a plain text without any format.

  [DIALOGUE]
  ${contextualizedData}

  [CONVERSATION]
  Student: ${user}
  `;
  return { prompt };
};

export const getParaphrasePrompt = ({ user }: Props) => {
  // const prompt = `The way to empathize with someone in a conversation is to repeat their words back to them and give them a short response,
  // like "I'm not feeling well", "Really? You're not feeling well, get some rest",
  // etc. answer "user:" under "---" in 50 characters or less in an empathetic way.
  // If you don't have enough information to provide an empathetic response in this context.,
  // don't say anything else and give an empty string "I didn't quite understand" as the answer.

  //   - Tone: Polite
  //   - Style: Concise (100 characters or less)
  //   - Reader level: College students
  //   - Length: One sentence
  //   - Answer me in English
  //   - Don't ask me any more questions.
  //   ---
  //   user:${user} \n
  //   `;
  const prompt = `
    [TASK]
    Assume that you're the Pablo Picasso who's instructing the student about your painting.
    Generate a reply to following observation, yet only using a paraphrase with verbose expressions.
    The idea is to convey that you're empathizing with student's observation. Do not exceed more than one sentence.
    
    [DATA]
    Observation: ${user}
  `;

  return { prompt };
};

// TODO : refine
export const getAnswerWithVectorDBPrompt_backup = ({ context }: Props) => {
  const prompt = `
    See "Sentence 1 :" under "---".
    Sentence 1: is a record of all the conversations we've had, which we'll call context. 
    Engage in conversation as young Pablo Picasso. Speak once and wait for the next response.
    The context records all the conversations so far. The data structure of the context looks like this 
    type chat = {{id:number, user:string, ai:string}}
    type context = chat[]
    chat.id is the primaryKey, chat.user is the user's chat, and chat.ai is Pablo Picasso, your chat.
    The answer is generated by referencing the last chat in context.
    For example, if context[context.length-1] looks like this
    {{id:5, user:"I think this painting is funny", ai:""}}
    You just need to come up with something to fill in the blanks in chat.ai.
    We're talking about Pablo Picasso's Geronica. 
    
    You can answer by referring to the line below
    - Tone: Polite
    - Style: Concise (150 characters or less)
    - Reader level: College students
    - Length: One sentence or Two sentence
    - Answer me in English
    - Answer that you don't know what you don't know.
    - Don't ask me any more questions.
    ---
    Sentence 1 : ${context} \n
    `;
  return { prompt };
};

export const getAnswerWithVectorDBPrompt = ({ user }: Props) => {
  const prompt = `
  We're in a museum looking at Pablo Picasso's painting Guernica, 
  and you're the young Picasso. For a natural conversation, 
  speak once and wait for the next answer.
  Answer "user:" sentence under "---" 


  ---
  user:${user}
  `;
  return { prompt };
};

// TODO : refine
export const getAdditionalQuestionPrompt = ({ context }: Props) => {
  // const prompt = `
  // See "Sentence 1 :" under "---".
  // Sentence 1: is a record of all the conversations we've had, which we'll call context.
  // Engage in conversation as young Pablo Picasso. Speak once and wait for the next response.
  // The context records all the conversations so far. The data structure of the context looks like this.
  // type chat = {{id:number, user:string, ai:string}}
  // type context = chat[]
  // chat.id is the primaryKey, chat.user is the user's chat, and chat.ai is Pablo Picasso, your chat.
  // The answer is generated by referencing the last chat in context.

  // Give a response to user's last words in the form of some sort of quiz or question.
  // For example, if context[context.length-1].user said "I'm hungry", what kind of food would you like to eat? or a quiz in the form of "What did you say is my favorite food?".

  // ---
  // context:${context}
  // `;
  const textContext = context
    .map((item) => {
      return `Pablo Picasso: ${item.ai}, Student: ${item.human} \n`;
    })
    .join("");

  console.log("textContextðŸ”¥ðŸ”¥ðŸ”¥", textContext);

  const prompt = `
    [TASK]
    You're an Pablo Picasso working as an art teacher, who is currently advising the student about your painting Guernica.
    Given following [DIALOGUE], generate a question that can clarify students idea about the painting.
    The idea is to help student generate one's own understanding of the painting. Do not exceed more than one sentence.
    
    [DIALOGUE]
    ${textContext}
  `;

  return { prompt };
};
